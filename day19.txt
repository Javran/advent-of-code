;; r1 appears to be a temporary result register.
;; r0 is the "answer register", the only mutation to it at 7,
;; which means it accumulates from r3.

0	jmp 17
1	r3 = 1
2	r5 = 1
3       <pretend noop>
;; when r3 * r5 /= r2
6	jmp 8
;; otherwise
7	r0 = r3 + r0
8	r5 = r5 + 1
;; when r5 < r2
11	jmp 3
;; otherwise
12	r3 = r3 + 1
;; when r3 < r2
15	jmp 2
;; otherwise
16	halt
;; everything beyond this appears to be input setup
;; in fact:
;; - r0 is always 0 when we jump back to 1.
;; - whatever value r1 holds doesn't matter, as it's overwritten at 3.
;; - r2 is never mutated above.
17	r2 = r2 + 2
18	r2 = r2 * r2
19	r2 = 19 * r2
20	r2 = r2 * 11
21	r1 = r1 + 2
22	r1 = r1 * 22
23	r1 = r1 + 7
24	r2 = r2 + r1
25	jmp r0 + 26
26	jmp 1  ;; r2 = 887
27	r1 = 27
28	r1 = r1 * 28
29	r1 = 29 + r1
30	r1 = 30 * r1
31	r1 = r1 * 14
32	r1 = r1 * 32
33	r2 = r2 + r1
34	r0 = 0
35	jmp 1  ;; r2 = 10551287
